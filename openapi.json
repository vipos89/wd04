{
  "openapi": "3.0.1",
  "info": {
    "title": "PassKit Members API",
    "termsOfService": "https://passkit.com/legal/terms-of-subscription-service/",
    "contact": {
      "name": "PassKit Support",
      "url": "https://docs.passkit.io",
      "email": "support@passkit.com"
    },
    "version": "1.0-rc"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Programs",
      "description": "Programs are the highest level object in the Members API. They contain the business logic for your program. Programs contain one or more tiers."
    },
    {
      "name": "Tiers",
      "description": "Tiers can be used to segregate members in your program. A member can only belong to one tier at the time. Think of tiers as levels like Bronze, Silver, Gold, etc. A tier holds the Pass Template design & copy for your Membership cards. Each program requires at least one tier."
    },
    {
      "name": "Members",
      "description": "The individual member record. A member belongs to a tier. The member record can hold any data particular to the member: PII, points, expiry, meta-data, etc."
    }
  ],
  "paths": {
    "/members/count/{programId}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Count Filtered Members [DEPRECATED]",
        "description": "[DEPRECATED: OR operator is not supported] Retrieves a count of filtered members.",
        "operationId": "Members_countMembersDeprecated",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "Allows you to offset the first record returned by the limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination.filterField",
            "in": "query",
            "description": "Array of column names to filter results by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.filterValue",
            "in": "query",
            "description": "Array of values to test against the filter fields.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.filterOperator",
            "in": "query",
            "description": "will be whitelisted operators in io core.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.orderBy",
            "in": "query",
            "description": "Field to order results by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.orderAsc",
            "in": "query",
            "description": "Will return in ascending order if true, or descending order if false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioCount"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "User lacks authorization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Count Filtered Members",
        "description": "Retrieves a count of filtered members.\n\n<span style=\"font-weight:bold\">About filter field names, operators and sample payloads:</span> <a target=\"_blank\" href=\"https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-members\">https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-members</a>",
        "operationId": "Members_countMembers",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "$ref": "#/components/schemas/ioFilters"
                  },
                  "emailAsCsv": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioCount"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "User lacks authorization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Record was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/enrol/url/program/{id}": {
      "get": {
        "tags": [
          "Enrolment Urls"
        ],
        "summary": "Get Program Enrolment Page URL",
        "description": "Retrieves enrolment page URL of the base tier and enrolment URLs for each tier .",
        "operationId": "Members_getProgramEnrolment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioEnrolmentUrls"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/member": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Update member",
        "description": "Updates member by either internal PassKit ID or External ID",
        "operationId": "Members_updateMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Enrol new Member",
        "description": "Enrols a new member",
        "operationId": "Members_enrolMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete member",
        "description": "Deletes member by either internal PassKit ID or External ID",
        "operationId": "Members_deleteMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/checkIn": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Check in member",
        "description": "Checks in a member by either internal PassKit ID or External ID.",
        "operationId": "Members_checkInMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMemberCheckInOutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMemberEvent"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/checkOut": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Check out member",
        "description": "Checks out a member by either internal PassKit ID or External ID.",
        "operationId": "Members_checkOutMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMemberCheckInOutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMemberEvent"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/events/id/{id}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Deletes an individual member event",
        "description": "Deletes an individual member event",
        "operationId": "Members_deleteMemberEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An Id is used to access an unique object or record. Eg. a PassKit pass id."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/events/meta/{id}": {
      "get": {
        "tags": [
          "Programs"
        ],
        "summary": "Get Member Event Meta Keys for a Program",
        "description": "Returns a list of distinct meta field keys for the member events. Can be used for building filters / table headings.",
        "operationId": "Members_getMemberEventMetaKeysForProgram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioStrings"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/member/events/{id}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete member events for member",
        "description": "Delete all members events for a member",
        "operationId": "Members_deleteEventsForMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An Id is used to access an unique object or record. Eg. a PassKit pass id."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/expiry": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Batch update member expiry",
        "description": "Batch updates expiry of ALL active members belong to the tier. Should only be used when you want to update ALL the expiry date for all member records in a given tier.",
        "operationId": "Members_renewMembersExpiry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersUpdateExpiryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioCount"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/externalId/{programId}/{externalId}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get member record by External ID",
        "description": "Gets member record by External ID",
        "operationId": "Members_getMemberRecordByExternalId",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Program ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMember"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/member/id/{id}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get member record by PassKit ID",
        "description": "Gets member record by PassKit ID",
        "operationId": "Members_getMemberRecordById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMember"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/member/list/events/{id}": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "List member events",
        "description": "List all members events for a member",
        "operationId": "Members_listEventsForMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An Id is used to access an unique object or record. Eg. a PassKit pass id."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersMemberEvent",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersMemberEvent"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/list/{programId}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List members [DEPRECATED]",
        "description": "[DEPRECATED: OR operator is not supported] List all members for a given segment. Supports pagination.",
        "operationId": "Members_listMembersDeprecated",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "Allows you to offset the first record returned by the limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination.filterField",
            "in": "query",
            "description": "Array of column names to filter results by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.filterValue",
            "in": "query",
            "description": "Array of values to test against the filter fields.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.filterOperator",
            "in": "query",
            "description": "will be whitelisted operators in io core.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.orderBy",
            "in": "query",
            "description": "Field to order results by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.orderAsc",
            "in": "query",
            "description": "Will return in ascending order if true, or descending order if false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersMember",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersMember"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "List members",
        "description": "List all members for a given segment. Supports pagination.\n\n<span style=\"font-weight:bold\">About filter field names, operators and sample payloads:</span> <a target=\"_blank\" href=\"https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-members\">https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-members</a>",
        "operationId": "Members_listMembers",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "$ref": "#/components/schemas/ioFilters"
                  },
                  "emailAsCsv": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersMember",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersMember"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/messages": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get members message history",
        "description": "Get all the message that have been sent to a member. Supports pagination.",
        "operationId": "Members_getMessageHistoryForMember",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Allows you to offset the first record returned by the limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filterField",
            "in": "query",
            "description": "Array of column names to filter results by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filterValue",
            "in": "query",
            "description": "Array of values to test against the filter fields.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filterOperator",
            "in": "query",
            "description": "will be whitelisted operators in io core.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order results by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderAsc",
            "in": "query",
            "description": "Will return in ascending order if true, or descending order if false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of ioMessage",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/ioMessage"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/member/meta/{id}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get Meta Keys for a Program",
        "description": "Returns a list of distinct meta field keys. Can be used for building filters / table headings.",
        "operationId": "Members_getMetaKeysForProgram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioStrings"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/member/person": {
      "patch": {
        "tags": [
          "Members"
        ],
        "summary": "Update Personal Information",
        "description": "Updates personal information of a member pass holder",
        "operationId": "Members_patchPerson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ioPersonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/points/burn": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Burn points",
        "description": "Burn points for a member (identified by PassKit ID or External ID). Deducts the amounts provided.",
        "operationId": "Members_burnPoints",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersEarnBurnPointsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMemberPoints"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/points/earn": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Earn points",
        "description": "Earns points for a member (identified by PassKit ID or External ID). Adds the amounts provided.",
        "operationId": "Members_earnPoints",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersEarnBurnPointsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMemberPoints"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/points/set": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Set points",
        "description": "Set points for a member (identified by PassKit ID or External ID). Sets the amounts provided.",
        "operationId": "Members_setPoints",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersSetPointsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMemberPoints"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/public": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Enrol new Member (public)",
        "description": "Enrols a new member into the default tier of a program that is public",
        "operationId": "Members_enrolMemberPublic",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/segment": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Update members by segment",
        "description": "Updates members by segment",
        "operationId": "Members_updateMembersBySegment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMemberSegmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete members by segment",
        "description": "Deletes members by segment",
        "operationId": "Members_deleteMembersBySegment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMemberSegmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/tier": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Change tier",
        "description": "Change tier for a member (identified by PassKit ID or External ID).",
        "operationId": "Members_changeMemberTier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersChangeTierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersMemberEvent"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/member/updateExpiry": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Update member expiry",
        "description": "Updates expiry of a single member.",
        "operationId": "Members_updateMemberExpiry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersMemberExpiry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/program": {
      "put": {
        "tags": [
          "Programs"
        ],
        "summary": "Update Program",
        "description": "Updates an existing program record",
        "operationId": "Members_updateProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersProgram"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersProgram"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Programs"
        ],
        "summary": "Create Program",
        "description": "Creates a program record",
        "operationId": "Members_createProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersProgram"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/program/copy": {
      "post": {
        "tags": [
          "Programs"
        ],
        "summary": "Copy Program",
        "description": "Copies an existing program record",
        "operationId": "Members_copyProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersProgramCopyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/program/count/events/{programId}": {
      "post": {
        "tags": [
          "Programs"
        ],
        "summary": "Count member events",
        "description": "Counts all members events for a program",
        "operationId": "Members_countMemberEvents",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "$ref": "#/components/schemas/ioFilters"
                  },
                  "emailAsCsv": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioCount"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/program/events/{programId}": {
      "delete": {
        "tags": [
          "Programs"
        ],
        "summary": "Deletes member events",
        "description": "Deletes all members events for a program and filter",
        "operationId": "Members_deleteMemberEvents",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "$ref": "#/components/schemas/ioFilters"
                  },
                  "emailAsCsv": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/program/list/events/{programId}": {
      "post": {
        "tags": [
          "Programs"
        ],
        "summary": "List member events",
        "description": "List all members events for a program",
        "operationId": "Members_listMemberEvents",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "$ref": "#/components/schemas/ioFilters"
                  },
                  "emailAsCsv": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersMemberEvent",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersMemberEvent"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/program/{id}": {
      "get": {
        "tags": [
          "Programs"
        ],
        "summary": "Get Program",
        "description": "Gets an existing program record",
        "operationId": "Members_getProgram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersProgram"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Programs"
        ],
        "summary": "Delete Program",
        "description": "Deletes an existing program record. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.",
        "operationId": "Members_deleteProgram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier to an object or record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An Id is used to access an unique object or record. Eg. a PassKit pass id."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/programs": {
      "get": {
        "tags": [
          "Programs"
        ],
        "summary": "List Programs [DEPRECATED]",
        "description": "[DEPRECATED: OR operator is not supported] Lists all programs",
        "operationId": "Members_listProgramsDeprecated",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Allows you to offset the first record returned by the limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filterField",
            "in": "query",
            "description": "Array of column names to filter results by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filterValue",
            "in": "query",
            "description": "Array of values to test against the filter fields.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filterOperator",
            "in": "query",
            "description": "will be whitelisted operators in io core.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order results by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderAsc",
            "in": "query",
            "description": "Will return in ascending order if true, or descending order if false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersProgram",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersProgram"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/programs/list": {
      "post": {
        "tags": [
          "Programs"
        ],
        "summary": "List Programs",
        "description": "Lists all programs\n\n<span style=\"font-weight:bold\">About filter field names, operators and sample payloads:</span> <a target=\"_blank\" href=\"https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-programs\">https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-programs</a>",
        "operationId": "Members_listPrograms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ioFilters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersProgram",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersProgram"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/tier": {
      "put": {
        "tags": [
          "Tiers"
        ],
        "summary": "Update Tier",
        "description": "Updates a tier by tier id",
        "operationId": "Members_updateTier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersTier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersTier"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Tiers"
        ],
        "summary": "Create Tier",
        "description": "Creates a new tier",
        "operationId": "Members_createTier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersTier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ioId"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/tier/{programId}/{tierId}": {
      "get": {
        "tags": [
          "Tiers"
        ],
        "summary": "Get Tier",
        "description": "Get a tier by program and tier ids",
        "operationId": "Members_getTier",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Program ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tierId",
            "in": "path",
            "description": "Tier ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/membersTier"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tiers"
        ],
        "summary": "Delete Tier",
        "description": "Deletes a tier and members who belong to the tier. Needs to be used with care.",
        "operationId": "Members_deleteTier",
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Program ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tierId",
            "in": "path",
            "description": "Tier ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Used to request member tier record by tier id."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/tiers": {
      "get": {
        "tags": [
          "Tiers"
        ],
        "summary": "List Tiers [DEPRECATED]",
        "description": "[DEPRECATED: OR operator is not supported] Lists all tiers",
        "operationId": "Members_listTiersDeprecated",
        "parameters": [
          {
            "name": "programId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "Allows you to offset the first record returned by the limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination.filterField",
            "in": "query",
            "description": "Array of column names to filter results by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.filterValue",
            "in": "query",
            "description": "Array of values to test against the filter fields.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.filterOperator",
            "in": "query",
            "description": "will be whitelisted operators in io core.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.orderBy",
            "in": "query",
            "description": "Field to order results by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.orderAsc",
            "in": "query",
            "description": "Will return in ascending order if true, or descending order if false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersTier",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersTier"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        }
      }
    },
    "/members/tiers/list": {
      "post": {
        "tags": [
          "Tiers"
        ],
        "summary": "List Tiers",
        "description": "Lists all tiers\n\n<span style=\"font-weight:bold\">About filter field names, operators and sample payloads:</span> <a target=\"_blank\" href=\"https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-tiers\">https://help.passkit.com/en/articles/4133757-membership-protocol-filtering-listing-and-counting-by-api#filter-tiers</a>",
        "operationId": "Members_listTiers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/membersListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Stream result of membersTier",
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/membersTier"
                    },
                    "error": {
                      "$ref": "#/components/schemas/googlerpcStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned when wrong user input is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Returned when the user is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returned when there is an unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "503": {
            "description": "Server is unavailable. Back off for 250ms and repeat request until successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "googlerpcStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            }
          }
        }
      },
      "ioBeacon": {
        "title": "Beacon",
        "required": [
          "lockScreenMessage",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "System generated unique identifier for your beacon",
            "type": "string"
          },
          "uuid": {
            "type": "string",
            "description": "A valid UUID that is being broadcast from your beacon."
          },
          "name": {
            "title": "A friendly name used to display the beacon in the admin portal",
            "type": "string"
          },
          "major": {
            "maximum": 65535,
            "type": "integer",
            "description": "Major indicator.",
            "format": "int64"
          },
          "minor": {
            "maximum": 65535,
            "type": "integer",
            "description": "Minor indicator.",
            "format": "int64"
          },
          "lockScreenMessage": {
            "type": "string",
            "description": "Message to be displayed on lock screen when user is in proximity of the beacon (iOS only)."
          },
          "localizedLockScreenMessage": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "position": {
            "type": "integer",
            "description": "Beacons will be added in order of their position, from lowest to highest. Position can be any value, E.g. 3 Beacons with positions 30, 10, 20 would be added 10 first, 20 second and 30 third.  If no position is provided and the number of beacons exceeds 10, there is no guarantee which beacon(s) would be excluded from the pass.",
            "format": "int64"
          }
        },
        "description": "A beacon record enables the pass to push a message to the lock screen when the user is in close proximity with the beacon. Beacons are currently only supported by iOS."
      },
      "ioColors": {
        "type": "object",
        "properties": {
          "backgroundColor": {
            "type": "string",
            "description": "The background color of the card in hex (e.g. “#ffffff” or \"ffffff\")."
          },
          "labelColor": {
            "type": "string",
            "description": "This customises the color of field label of Apple Wallet pass."
          },
          "textColor": {
            "type": "string",
            "description": "This customises the color of field text or value of Apple Wallet pass."
          },
          "stripColor": {
            "type": "string",
            "description": "Optional undocumented color for text placed over the strip image in Apple Wallet."
          }
        },
        "description": "Colours take a hexcode input.  A '#' prefix is optional."
      },
      "ioCount": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ioDate": {
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "description": "Year.",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "description": "Month.",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "description": "Day.",
            "format": "int32"
          }
        },
        "description": "A fixed date without timezone information."
      },
      "ioDeviceAttributes": {
        "type": "string",
        "default": "NoAttributes",
        "enum": [
          "NoAttributes",
          "Ios",
          "Android",
          "SupportWallet",
          "WalletScanner",
          "WalletDaemon",
          "WalletPasses",
          "Windows",
          "OSX",
          "Linux",
          "Mobile",
          "Desktop",
          "Tablet",
          "UnsupportedIos"
        ]
      },
      "ioDistributionChannel": {
        "title": "- CHANNEL_EMAIL: Unique pass link is distributed via email (will use default PK email template if no custom Email Template is provided)\n - CHANNEL_SMS: Unique pass link is distributed via SMS (will use default PK SMS template if no custom SMS Template is provided)",
        "type": "string",
        "default": "NO_DISTRIBUTION",
        "enum": [
          "NO_DISTRIBUTION",
          "CHANNEL_EMAIL",
          "CHANNEL_SMS"
        ]
      },
      "ioDistributionSettings": {
        "title": "DistributionSettings can be used by protocol top level elements to define the email / sms-es",
        "type": "object",
        "properties": {
          "distributionChannels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ioDistributionChannel"
            }
          },
          "welcomeEmail": {
            "$ref": "#/components/schemas/ioEmailTemplate"
          },
          "welcomeSms": {
            "$ref": "#/components/schemas/ioSmsTemplate"
          }
        }
      },
      "ioEmailConfiguration": {
        "type": "object",
        "properties": {
          "emailFrom": {
            "type": "string",
            "description": "Sender's email address."
          },
          "emailFromName": {
            "type": "string",
            "description": "Sender's company / organization name."
          },
          "EmailFromVerifiedForSending": {
            "title": "Indicates that PassKit is authorized to send from the emailFrom address (either via AWS or Google Cloud)",
            "type": "boolean"
          }
        }
      },
      "ioEmailTemplate": {
        "title": "EmailTemplate contains details for sending an email to a customer.\nUses the default PassKit email provider and sending credentials",
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject of the email. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.."
          },
          "localizedSubject": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "bodyTextContent": {
            "type": "string",
            "description": "Text content of the email (for email clients that don't support HTML). The body text is rendered above pass install url text. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc."
          },
          "localizedBodyTextContent": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "bodyHtmlContent": {
            "type": "string",
            "description": "Content for HTML email rendered above the pass install button. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc."
          },
          "localizedBodyHtmlContent": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "configuration": {
            "$ref": "#/components/schemas/ioEmailConfiguration"
          },
          "buttonText": {
            "type": "string",
            "description": "Text of the pass install button."
          },
          "buttonTextColor": {
            "type": "string",
            "description": "Text color of the pass install button."
          },
          "buttonBackgroundColor": {
            "type": "string",
            "description": "Color of the pass install button."
          },
          "buttonBorderRadius": {
            "type": "string",
            "description": "Radius of the pass install button. The unit can be px or %. Default is px."
          },
          "footerTextContent": {
            "type": "string",
            "description": "Footer text content (for email clients that don't support HTML). The footer text is rendered below the pass install url text."
          },
          "localizedFooterTextContent": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "footerHtmlContent": {
            "type": "string",
            "description": "Footer HTML content rendered below the pass install button."
          },
          "localizedFooterHtmlContent": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "messageBackgroundColor": {
            "type": "string",
            "description": "Background color for the message content section."
          },
          "pageBackgroundColor": {
            "type": "string",
            "description": "Background color for the margin space surrounding the message content. This setting is relevant for PC viewers."
          },
          "templateOptions": {
            "type": "integer",
            "description": "Holds additional template options for rendering the email template.",
            "format": "int32"
          }
        }
      },
      "ioEnrolmentUrls": {
        "type": "object",
        "properties": {
          "pageUrl": {
            "type": "string",
            "description": "Enrolment page of the base tier (tier with the lowest tier index)."
          },
          "qrCodeUrl": {
            "type": "string",
            "description": "QR code image url of the the base tier."
          },
          "tierEnrolmentUrls": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Enrolment page for each tier."
          },
          "tierEnrolmentQRs": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "QR code for each tier."
          }
        }
      },
      "ioExpirySettings": {
        "type": "object",
        "properties": {
          "expiryType": {
            "$ref": "#/components/schemas/ioExpiryType"
          },
          "fixedExpiryDate": {
            "$ref": "#/components/schemas/ioDate"
          },
          "expireAfterXDays": {
            "type": "integer",
            "description": "Number of days the digital membership card is expired after the enrolment date.\nPlease set expiryType as EXPIRE_AFTER_X_DAYS.",
            "format": "int64"
          }
        },
        "description": "The digital card will be expired on the expiry date. The barcode will not be rendered on digital card and the card itself will not be updated after it has been expired."
      },
      "ioExpiryType": {
        "type": "string",
        "description": "Options to manage the expiry date of the digital card.\n\n - EXPIRE_NONE: Please do not use this enum. This enum do not have any effect on expiry logic.\n - EXPIRE_ON_FIXED_DATE: Expiry date is set with year, month and date. The expiry date will be based on your timezone. The digital card will expire at 23:59:59:59.99999 of set date in fixed timezone. The expiry date is the same for all cards.\n - EXPIRE_AFTER_X_DAYS: The digital card expires after the number of days after the digital card issuing.\n - EXPIRE_ON_VARIABLE_DATE_TIME: If you want to change expiry date for each digital card, you can use this expiry type. You can set expiry date and time in fixed timezone.\n - EXPIRE_SET_TO_NULL: The digital card will set as NULL and the pass will not expire..",
        "default": "EXPIRE_NONE",
        "enum": [
          "EXPIRE_NONE",
          "EXPIRE_ON_FIXED_DATE",
          "EXPIRE_AFTER_X_DAYS",
          "EXPIRE_ON_VARIABLE_DATE_TIME",
          "EXPIRE_SET_TO_NULL"
        ]
      },
      "ioFieldFilter": {
        "type": "object",
        "properties": {
          "filterField": {
            "type": "string",
            "description": "Column name to filter results by."
          },
          "filterValue": {
            "type": "string",
            "description": "Values to test against the filter fields."
          },
          "filterOperator": {
            "title": "Operator (e.g. eq, gt, gte, lt, lte, like)",
            "type": "string"
          }
        }
      },
      "ioFilter": {
        "type": "object",
        "properties": {
          "filterField": {
            "type": "array",
            "description": "Array of column names to filter results by.",
            "items": {
              "type": "string"
            }
          },
          "filterValue": {
            "type": "array",
            "description": "Array of values to test against the filter fields.",
            "items": {
              "type": "string"
            }
          },
          "filterOperator": {
            "title": "will be whitelisted operators in io core",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ioFilterGroup": {
        "type": "object",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/ioOperator"
          },
          "fieldFilters": {
            "type": "array",
            "description": "Filter fields.",
            "items": {
              "$ref": "#/components/schemas/ioFieldFilter"
            }
          }
        }
      },
      "ioFilters": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "description": "Allows you to offset the first record returned by the limit.",
            "format": "int32"
          },
          "filterGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ioFilterGroup"
            }
          },
          "orderBy": {
            "type": "string",
            "description": "Field to order results by."
          },
          "orderAsc": {
            "type": "boolean",
            "description": "Will return in ascending order if true, or descending order if false."
          }
        },
        "description": "Filters applies multiple filter conditions to retrieve matched records."
      },
      "ioGPSLocation": {
        "title": "GPS Location",
        "required": [
          "lat",
          "lockScreenMessage"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "System generated unique identifier for your GPS Location",
            "type": "string"
          },
          "name": {
            "title": "a friendly name for the location used to display the location in the admin portal",
            "type": "string"
          },
          "lat": {
            "type": "number",
            "description": "Latitude.",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "Longitude.",
            "format": "double"
          },
          "alt": {
            "type": "integer",
            "description": "Altitude in metres.",
            "format": "int32"
          },
          "lockScreenMessage": {
            "type": "string",
            "description": "Message to be displayed on lock screen when user is in the location (iOS only)."
          },
          "localizedLockScreenMessage": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "position": {
            "type": "integer",
            "description": "Locations will be added in order of their position, from lowest to highest. Position can be any value, E.g. 3 Locations with positions 30, 10, 20 would be added 10 first, 20 second and 30 third.  If no position is provided and the number of locations exceeds 10, there is no guarantee which location(s) would be excluded from the pass.",
            "format": "int64"
          }
        },
        "description": "A location record enables the pass to be pushed to the lock screen when the user is in near the location. For iOS users, a customized message can also be displayed."
      },
      "ioGender": {
        "type": "string",
        "description": "Gender, as per government issued id.\n\n - NOT_KNOWN: Use only where gender is not known\n - MALE: Male\n - FEMALE: Female",
        "default": "NOT_KNOWN",
        "enum": [
          "NOT_KNOWN",
          "MALE",
          "FEMALE"
        ]
      },
      "ioId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier to an object or record."
          }
        },
        "description": "An Id is used to access an unique object or record. Eg. a PassKit pass id."
      },
      "ioImageIds": {
        "title": "Image Ids",
        "required": [
          "icon"
        ],
        "type": "object",
        "properties": {
          "icon": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "appleLogo": {
            "type": "string"
          },
          "hero": {
            "type": "string"
          },
          "eventStrip": {
            "type": "string"
          },
          "strip": {
            "type": "string"
          },
          "thumbnail": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "footer": {
            "type": "string"
          },
          "security": {
            "type": "string"
          },
          "privilege": {
            "type": "string"
          },
          "airlineAlliance": {
            "type": "string"
          },
          "personalization": {
            "type": "string"
          },
          "banner": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "appImage": {
            "type": "string"
          },
          "stampedImage": {
            "type": "string"
          },
          "unstampedImage": {
            "type": "string"
          },
          "stampImage": {
            "type": "string"
          }
        },
        "description": "This manages images by id"
      },
      "ioLifecycleEvents": {
        "type": "string",
        "description": "Statuses of the pass. A pass will collect multiple statuses as it passes through its lifecycle.\n\n - RENDERED: Pass has been created and presented to the user to install.\n - INSTALLED_APPLE: Pass has been installed in at least one Apple device.\n - INSTALLED_GOOGLE: Pass has been installed in at least one Google Pay account.\n - INSTALLED_ANDROID_OTHER: Pass has been installed in at least one Android wallet app.\n - UNINSTALLED_APPLE: Pass has been uninstalled from at least one Apple device.\n - UNINSTALLED_GOOGLE: Pass has been uninstalled from at least one Google Pay account.\n - UNINSTALLED_ANDROID_OTHER: Pass has been uninstalled from at least one Android wallet app.\n - APPLE_PASS_CREATED: An Apple pass bundle has been created.\n - GOOGLE_PAY_RECORD_CREATED: A Google Pay record has been created.\n - INVALIDATE_REQUESTED: Invalidation request sent to pass.\n - INVALIDATE_CONFIRMED: Pass has been invalidated.",
        "default": "NO_STATUS",
        "enum": [
          "NO_STATUS",
          "RENDERED",
          "INSTALLED_APPLE",
          "INSTALLED_GOOGLE",
          "INSTALLED_ANDROID_OTHER",
          "UNINSTALLED_APPLE",
          "UNINSTALLED_GOOGLE",
          "UNINSTALLED_ANDROID_OTHER",
          "APPLE_PASS_CREATED",
          "GOOGLE_PAY_RECORD_CREATED",
          "INVALIDATE_REQUESTED",
          "INVALIDATE_CONFIRMED"
        ]
      },
      "ioLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Link Id. Not writable."
          },
          "url": {
            "type": "string",
            "description": "A link text."
          },
          "title": {
            "type": "string",
            "description": "Title for the link."
          },
          "type": {
            "$ref": "#/components/schemas/ioLinkType"
          },
          "localizedLink": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "localizedTitle": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "usage": {
            "type": "array",
            "description": "Indicates which wallets the link should be rendered for (this allows to hide certain link on Apple Wallet, and vise versa).",
            "items": {
              "$ref": "#/components/schemas/ioUsageType"
            }
          },
          "position": {
            "type": "integer",
            "description": "Links will be rendered in order of their position, from lowest to highest. Position can be any value, E.g. 3 links with positions 30, 10, 20 would render 10 first, 20 second and 30 third.  If no position is provided, the order of the links cannot be guaranteed.",
            "format": "int64"
          }
        },
        "description": "Used to specify links put on the back of the pass."
      },
      "ioLinkType": {
        "type": "string",
        "description": "Used to specify the type of link for link field. Each type has different icon on Google Pay.\n\n - URI_DO_NOT_USE: A link to website.\n - URI_WEB: A link to website.\n - URI_TEL: A phone number.\n - URI_EMAIL: An email address.\n - URI_LOCATION: A location address.\n - URI_CALENDAR: A calendar event.",
        "default": "URI_DO_NOT_USE",
        "enum": [
          "URI_DO_NOT_USE",
          "URI_WEB",
          "URI_TEL",
          "URI_EMAIL",
          "URI_LOCATION",
          "URI_CALENDAR"
        ]
      },
      "ioLocalizedString": {
        "type": "object",
        "properties": {
          "translations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Translations key is a valid LanguageCode. The value represents the translated string."
          }
        },
        "description": "Localized strings are optionally used to provide translated values for each of supported language."
      },
      "ioMessage": {
        "type": "object",
        "properties": {
          "protocol": {
            "$ref": "#/components/schemas/ioPassProtocol"
          },
          "companyId": {
            "title": "the id of the company that made the message",
            "type": "string"
          },
          "classId": {
            "type": "string",
            "description": "the higher level class id for the protocol."
          },
          "uuid": {
            "title": "the unique id for this message",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ioMessageStatus"
          },
          "warning": {
            "type": "string",
            "description": "warning of any errors that may have occurred."
          },
          "imageId": {
            "type": "integer",
            "description": "Optional Image ID; for the Main Image that will be shown in Google Pay (Google Pay only; no image is shown for Apple Wallet).",
            "format": "int64"
          },
          "title": {
            "type": "string",
            "description": "Title (summary) of the message."
          },
          "localizedTitle": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "content": {
            "type": "string",
            "description": "Content of the message (finer details)."
          },
          "localizedContent": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "startDate": {
            "type": "string",
            "description": "Start date indicates when the message is shown on the pass.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date indicates when the message is removed from the pass.",
            "format": "date-time"
          },
          "filter": {
            "$ref": "#/components/schemas/ioFilter"
          },
          "recordsMatchingSegment": {
            "type": "integer",
            "description": "number of records this message will be sent to.",
            "format": "int64"
          },
          "recordsSuccessfullyUpdate": {
            "type": "integer",
            "description": "number of records updated with this message.",
            "format": "int64"
          },
          "recordsFailedToUpdate": {
            "type": "integer",
            "description": "number of records that failed updated with this message.",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "description": "The date the message was created in the PassKit system.",
            "format": "date-time"
          }
        }
      },
      "ioMessageStatus": {
        "type": "string",
        "default": "CREATED",
        "enum": [
          "CREATED",
          "PROCESSING",
          "ABORTED_WITH_ERRORS",
          "COMPLETED_WITH_WARNINGS",
          "COMPLETED_WITH_ERRORS",
          "COMPLETED_WITHOUT_ERRORS"
        ]
      },
      "ioMetaLocation": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country of issue."
          },
          "city": {
            "type": "string",
            "description": "City of issue."
          },
          "state": {
            "type": "string",
            "description": "State, region, province or county of issue."
          },
          "latitude": {
            "type": "number",
            "description": "Latitude of issue (provided in the issue call).",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of issue (provided in the issue call).",
            "format": "double"
          }
        }
      },
      "ioMetadata": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ioStatus"
          },
          "lifecycleEvents": {
            "type": "array",
            "description": "Events that the pass has attained. Not Writable.",
            "items": {
              "$ref": "#/components/schemas/ioLifecycleEvents"
            }
          },
          "utm": {
            "$ref": "#/components/schemas/ioUTM"
          },
          "altId": {
            "title": "Id of the physical pass. Not Writeable",
            "type": "string"
          },
          "issueIpAddress": {
            "title": "IP address of the pass issue. Not Writeable",
            "type": "string"
          },
          "installIpAddress": {
            "type": "string",
            "description": "IP address of the device where the pass was installed on. Not Writeable."
          },
          "renderLocation": {
            "$ref": "#/components/schemas/ioMetaLocation"
          },
          "renderIpAddress": {
            "type": "string",
            "description": "IP address of the device where the pass landing page was rendered on. Not Writeable."
          },
          "installUserAgent": {
            "type": "string",
            "description": "User agent provided by the Wallet Application. Not Writable."
          },
          "renderUserAgent": {
            "type": "string",
            "description": "User agent where the landing page was rendered on. Not Writable."
          },
          "installDeviceAttributes": {
            "type": "array",
            "description": "User agent provided by the Wallet Application. Not Writable.",
            "items": {
              "$ref": "#/components/schemas/ioDeviceAttributes"
            }
          },
          "renderDeviceAttributes": {
            "type": "array",
            "description": "User agent where the landing page was rendered on. Not Writable.",
            "items": {
              "$ref": "#/components/schemas/ioDeviceAttributes"
            }
          },
          "issueAt": {
            "type": "string",
            "description": "Date the pass record was created. Not Writable.",
            "format": "date-time"
          },
          "renderedAt": {
            "type": "string",
            "description": "Date the pass was first displayed to the user to install. Not Writable.",
            "format": "date-time"
          },
          "firstInstalledAt": {
            "type": "string",
            "description": "Date the pass was first installed in a mobile wallet. Not Writable.",
            "format": "date-time"
          },
          "lastInstalledAt": {
            "type": "string",
            "description": "Date the pass was last installed in a mobile wallet. For Apple devices, this will update each time the device registers a new token. Not Writable.",
            "format": "date-time"
          },
          "firstUninstalledAt": {
            "type": "string",
            "description": "Date the pass was first uninstalled from a mobile wallet.  For Apple devices, this represents either the time notifications were disabled, or when the pass was removed from the wallet as it is not possible to distinguish the two events. Not Writable.",
            "format": "date-time"
          },
          "lastUninstalledAt": {
            "type": "string",
            "description": "Date the pass was last uninstalled from a mobile wallet. Not Writable.",
            "format": "date-time"
          },
          "invalidatedAt": {
            "type": "string",
            "description": "Date the pass was invalidated. Not Writable.",
            "format": "date-time"
          },
          "lastUpdatedAt": {
            "type": "string",
            "description": "Date the pass record was last updated. Can be used for segmenting passes based 'last visit', or 'last-purchase'. Not Writable.",
            "format": "date-time"
          }
        },
        "description": "Additional data relating to the pass. Metadata can be provided with a create pass request. The only writeable field is UTM. All other fields are system generated."
      },
      "ioMetrics": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "Pass records created.",
            "format": "uint64"
          },
          "appleWalletInstalls": {
            "type": "string",
            "description": "Number of passes installed in Apple Wallet.",
            "format": "uint64"
          },
          "googlePayInstalls": {
            "type": "string",
            "description": "Number of passes installed in Google Pay.",
            "format": "uint64"
          },
          "otherAndroidInstalls": {
            "type": "string",
            "description": "Number of passes installed in Android wallet apps e.g. WalletPasses.",
            "format": "uint64"
          },
          "appleWalletUninstalls": {
            "type": "string",
            "description": "Number of passes uninstalled from Apple Wallet.",
            "format": "uint64"
          },
          "googlePayUninstalls": {
            "type": "string",
            "description": "Number of passes uninstalled from Google Pay.",
            "format": "uint64"
          },
          "otherAndroidUninstalls": {
            "type": "string",
            "description": "Number of passes uninstalled from Android wallet apps e.g. WalletPasses.",
            "format": "uint64"
          },
          "invalidations": {
            "type": "string",
            "description": "Number of passes invalidated.",
            "format": "uint64"
          }
        },
        "description": "Metrics list issued, installed, uninstalled and invalidated counts."
      },
      "ioNote": {
        "type": "object",
        "properties": {
          "subjectId": {
            "title": "the id of the subject who note is a written against",
            "type": "string"
          },
          "username": {
            "title": "the username of who creates the note",
            "type": "string"
          },
          "message": {
            "title": "the content of the note",
            "type": "string"
          },
          "created": {
            "title": "when the note was created",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ioOperator": {
        "type": "string",
        "description": " - AND: Join grouped filter fields with AND operator. E.g. tier_id = bronze AND tier_id = silver. The default.\n - OR: Join grouped filter fields with OR operator. E.g. tier_id = bronze OR tier_id = silver.",
        "default": "AND",
        "enum": [
          "AND",
          "OR"
        ]
      },
      "ioPagination": {
        "title": "Pagination",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "description": "Allows you to offset the first record returned by the limit.",
            "format": "int32"
          },
          "filterField": {
            "type": "array",
            "description": "Array of column names to filter results by.",
            "items": {
              "type": "string"
            }
          },
          "filterValue": {
            "type": "array",
            "description": "Array of values to test against the filter fields.",
            "items": {
              "type": "string"
            }
          },
          "filterOperator": {
            "title": "will be whitelisted operators in io core",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orderBy": {
            "type": "string",
            "description": "Field to order results by."
          },
          "orderAsc": {
            "type": "boolean",
            "description": "Will return in ascending order if true, or descending order if false."
          }
        },
        "description": "Pagination object used to split content into smaller parts."
      },
      "ioPassOverrides": {
        "type": "object",
        "properties": {
          "imageIds": {
            "$ref": "#/components/schemas/ioImageIds"
          },
          "locations": {
            "maxItems": 10,
            "type": "array",
            "description": "A list of up to 10 GPS locations where this pass should be presented on the lock-screen.",
            "items": {
              "$ref": "#/components/schemas/ioGPSLocation"
            }
          },
          "beacons": {
            "maxItems": 10,
            "type": "array",
            "description": "A list of up to 10 Beacon UUIDs that should trigger the pass to be presented on the lock-screen.",
            "items": {
              "$ref": "#/components/schemas/ioBeacon"
            }
          },
          "links": {
            "maxItems": 10,
            "type": "array",
            "description": "A list of (personalized) links to be shown on the pass.",
            "items": {
              "$ref": "#/components/schemas/ioLink"
            }
          },
          "colors": {
            "$ref": "#/components/schemas/ioColors"
          },
          "associatedStoreIdentifiers": {
            "type": "array",
            "description": "A list of iTunes Store item identifiers for the associated apps. Only one item in the list is used — the first item identifier for an app compatible with the user's App Store account and device (hardware/iOS version). If the app is not installed, the link opens the App Store and shows the app. If the app is already installed, the link launches the app.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "PassOverrides contains optional pass-object level details. Overrides any template level values."
      },
      "ioPassProtocol": {
        "title": "- RAW_PROTOCOL: Reserved for raw pass protocol.\n - V1_PROTOCOL: Reserved for migrating legacy v1 passes.\n - FLIGHT_PROTOCOL: Flights protocol: https://docs.passkit.io/protocols/boarding/\n - MEMBERSHIP: Values 100 onwards are for PassKit generic protocols.\nGeneric Membership protocol: https://docs.passkit.io/protocols/member/\n - SINGLE_USE_COUPON: Single Use Coupon protocol: https://docs.passkit.io/protocols/coupon/\n - EVENT_TICKETING: Event Ticket protocol: https://docs.passkit.io/protocols/event/",
        "type": "string",
        "default": "PASS_PROTOCOL_DO_NOT_USE",
        "enum": [
          "PASS_PROTOCOL_DO_NOT_USE",
          "RAW_PROTOCOL",
          "V1_PROTOCOL",
          "FLIGHT_PROTOCOL",
          "MEMBERSHIP",
          "SINGLE_USE_COUPON",
          "EVENT_TICKETING"
        ]
      },
      "ioPerson": {
        "type": "object",
        "properties": {
          "surname": {
            "type": "string",
            "description": "Surname / Family name."
          },
          "forename": {
            "type": "string",
            "description": "Forename / Given name."
          },
          "otherNames": {
            "type": "array",
            "description": "Other names.",
            "items": {
              "type": "string"
            }
          },
          "salutation": {
            "type": "string",
            "description": "Salutation or title."
          },
          "suffix": {
            "type": "string",
            "description": "Suffix. For multiple suffixes, separate with spaces."
          },
          "displayName": {
            "type": "string",
            "description": "If required, a string representing the user's preferred designation."
          },
          "gender": {
            "$ref": "#/components/schemas/ioGender"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/ioDate"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address."
          },
          "mobileNumber": {
            "type": "string",
            "description": "Telephone number. Enter in the format +{countryCode}{telephoneNumber} with no commas, spaces or other delimiters."
          },
          "externalId": {
            "type": "string",
            "description": "External id. Not editable."
          },
          "externalIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Ids used for integration purpose. Key is enum of ConfigurationType (e.g. WEBHOOK, DB_MYSQL, ZOHO). Not Writable."
          }
        },
        "description": "A person represents a single, identifiable individual."
      },
      "ioPersonRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pass Id (22 characters)."
          },
          "externalId": {
            "type": "string",
            "description": "External Id of the pass holder. Needs to provide Class Id as well."
          },
          "classId": {
            "type": "string",
            "description": "The class ID that the projects refers to (highest level protocol object; i.e. member program id, coupon campaign id, etc)."
          },
          "person": {
            "$ref": "#/components/schemas/ioPerson"
          }
        }
      },
      "ioPkBool": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean"
          }
        },
        "description": "To be used for booleans where we want users to be able to set to off / false via the API."
      },
      "ioProjectStatus": {
        "type": "string",
        "description": " - NO_PROJECT_STATUS: Zero based enum, don't use 0.\n - PROJECT_ACTIVE_FOR_OBJECT_CREATION: Active projects allow for creation of records (turned on by default).\n - PROJECT_DISABLED_FOR_OBJECT_CREATION: Disabled projects do not allow for creation of records (i.e. temporarily disable enroling of members / creating of coupons, etc).\n - PROJECT_DRAFT: Default status for all projects. A draft project can do everything a published program can:\nCards can be created, stats will show up, etc.\nData belonging to draft projects is automatically purged every 7 days.\nA draft project uses a PassKit Apple Developer Certificate, and has a PassKit legal disclaimer on the back.\nDraft projects cannot be used for a production setup.\n - PROJECT_PUBLISHED: A project can only be published if a custom Apple Developer Certificate is uploaded, if payment details have been provided,\nand an account email address has been validated.\nPublished projects do not have a PassKit legal disclaimer on the back.\nPublished projects do not have their data purged on a 7 day basis.\n - PROJECT_PRIVATE: A project is private: records can only by created by authorized users / via the portal interface.\n - PROJECT_OVER_QUOTA: The project is currently over quota, and new records cannot be created (set by system only; cannot be set by user)\n - PROJECT_DELETED: A project which needs to be deleted. If delete flag is set, project will be deleted in the near future.",
        "default": "NO_PROJECT_STATUS",
        "enum": [
          "NO_PROJECT_STATUS",
          "PROJECT_ACTIVE_FOR_OBJECT_CREATION",
          "PROJECT_DISABLED_FOR_OBJECT_CREATION",
          "PROJECT_DRAFT",
          "PROJECT_PUBLISHED",
          "PROJECT_PRIVATE",
          "PROJECT_OVER_QUOTA",
          "PROJECT_DELETED"
        ]
      },
      "ioQuota": {
        "type": "object",
        "properties": {
          "details": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ioQuotaDetails"
            }
          }
        }
      },
      "ioQuotaDetails": {
        "type": "object",
        "properties": {
          "quota": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "ioSmsTemplate": {
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 70,
            "type": "string",
            "description": "content of the SMS; needs to be limited to 70 unicode characters. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc."
          },
          "localizedContent": {
            "$ref": "#/components/schemas/ioLocalizedString"
          }
        },
        "description": "SMS contains details for a sending an sms to customers.\nUses the default PassKit SMS provider and sending credentials."
      },
      "ioStatus": {
        "type": "string",
        "description": "Status is the best determined status of the pass.\n\n - PASS_ISSUED: Pass has been issued.\n - PASS_INSTALLED: Pass has been installed in a wallet.\n - PASS_UNINSTALLED: Pass has been uninstalled (possibly deleted) from a wallet.\n - PASS_INVALIDATED: Pass has been invalidated.",
        "default": "PASS_ISSUED",
        "enum": [
          "PASS_ISSUED",
          "PASS_INSTALLED",
          "PASS_UNINSTALLED",
          "PASS_INVALIDATED"
        ]
      },
      "ioStrings": {
        "title": "Repeated field of dynamically typed values (including string, bool, option, syntax)",
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ioUTM": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Use source to identify where the request is coming from. Defaults to Unknown."
          },
          "medium": {
            "type": "string",
            "description": "Use medium to identify a medium such as email, app, or cost-per-click advertising."
          },
          "name": {
            "type": "string",
            "description": "Used for keyword analysis. Use campaign to identify a specific product promotion or strategic campaign."
          },
          "term": {
            "type": "string",
            "description": "Used for paid search. Use term to note the keywords for the ad that led to the pass."
          },
          "content": {
            "type": "string",
            "description": "Used for A/B testing and content-targeted ads. Use content to differentiate ads or links that point to the same URL."
          }
        }
      },
      "ioUsageType": {
        "title": "UsageType is used to indicate where a field or link is used / rendered",
        "type": "string",
        "description": "- USAGE_APPLE_WALLET: Rendered on Apple Wallet\n - USAGE_GOOGLE_PAY: Rendered on Google Pay\n - USAGE_DATA_COLLECTION_PAGE: Rendered on data collection page",
        "default": "NO_USAGE",
        "enum": [
          "NO_USAGE",
          "USAGE_APPLE_WALLET",
          "USAGE_GOOGLE_PAY",
          "USAGE_DATA_COLLECTION_PAGE"
        ]
      },
      "membersBalanceType": {
        "type": "string",
        "default": "BALANCE_TYPE_STRING",
        "enum": [
          "BALANCE_TYPE_STRING",
          "BALANCE_TYPE_INT",
          "BALANCE_TYPE_DOUBLE",
          "BALANCE_TYPE_MONEY"
        ]
      },
      "membersChangeTierRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "description": "PassKit generated member ID (22 characters). Required if externalMemberId and programId are not provided."
          },
          "externalMemberId": {
            "type": "string",
            "description": "External member ID. Required if id is not provided."
          },
          "programId": {
            "type": "string",
            "description": "Program ID which member belongs to. Required if id is not provided."
          },
          "tierId": {
            "type": "string",
            "description": "Indicates the ID of the tier."
          },
          "eventDetails": {
            "$ref": "#/components/schemas/membersEventDetails"
          }
        }
      },
      "membersCustomExternalId": {
        "type": "object",
        "properties": {
          "fieldUniqueName": {
            "type": "string",
            "description": "Field name which becomes a source of external id value. Available unique names are: null, person.emailAddress, person.mobileNumber."
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message shown when provided value has been taken already."
          }
        }
      },
      "membersEarnBurnPointsRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal PassKit ID."
          },
          "externalId": {
            "type": "string",
            "description": "External member ID."
          },
          "programId": {
            "type": "string",
            "description": "Required if externalId is set."
          },
          "points": {
            "type": "number",
            "description": "The amount of primary points earned or burnt. The amount needs to be greater than or equal to 0.",
            "format": "float"
          },
          "secondaryPoints": {
            "type": "number",
            "description": "The amount of secondary points earned or burnt. The amount needs to be greater than or equal to 0.",
            "format": "float"
          },
          "tierPoints": {
            "type": "integer",
            "description": "The amount of tier points earned or burnt. The amount needs to be greater than or equal to 0.",
            "format": "int64"
          },
          "eventDetails": {
            "$ref": "#/components/schemas/membersEventDetails"
          },
          "tierId": {
            "type": "string",
            "description": "Optional field to change the tierIf of the member."
          }
        }
      },
      "membersEventCaptureSettings": {
        "type": "object",
        "properties": {
          "eventDataRetentionSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Can be used to set data retention on event data. The key is the MemberEvents ENUM. Value is the data retention in days from the date the event record is created in the PassKit database."
          },
          "smsConfirmUponCheckIn": {
            "type": "boolean",
            "description": "If set, sends an SMS with unique link to member's registered phone number on check-in. Member will have to click the link and show unique code to merchant / attendant."
          },
          "emailConfirmUponCheckIn": {
            "type": "boolean",
            "description": "If set, sends an Email with unique link to member's registered email on check-in. Member will have to click the link and show unique code to merchant / attendant."
          }
        }
      },
      "membersEventDetails": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address the event took place."
          },
          "lat": {
            "type": "number",
            "description": "Latitude the event took place.",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "Longitude the event took place.",
            "format": "double"
          },
          "alt": {
            "type": "integer",
            "description": "Altitude the event took place (in metres).",
            "format": "int32"
          },
          "externalEventId": {
            "type": "string",
            "description": "External unique ID of the event."
          },
          "externalDeviceId": {
            "type": "string",
            "description": "External device ID of the device that was used to capture the event (for example when using an external scanning app)."
          },
          "externalServiceId": {
            "type": "string",
            "description": "External service ID of the service that was used for capturing the event (for example when using an external scanning app)."
          },
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any meta data (for example gathered on scanning) that is relevant to the event (# of points earner, bill spent, device meta-data, etc)."
          },
          "notes": {
            "type": "string",
            "description": "Any relevant notes for the event."
          }
        },
        "description": "Details on the event. These info will be stored in Member Event."
      },
      "membersListRequest": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "string"
          },
          "filters": {
            "$ref": "#/components/schemas/ioFilters"
          },
          "emailAsCsv": {
            "type": "boolean"
          }
        }
      },
      "membersMember": {
        "title": "Member",
        "required": [
          "programId",
          "tierId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id assigned by PassKit to represent the member record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable."
          },
          "externalId": {
            "type": "string",
            "description": "This can be used to set the 'external' ID of the member (i.e. the member ID as it's being used in your system). If provided then this can be used to query & update members. This field will be treated as unique within the program, and cannot be updated at a later stage."
          },
          "groupingIdentifier": {
            "type": "string",
            "description": "Grouping Identifier can be used to group members under the same membership (i.e. couple)."
          },
          "tierId": {
            "type": "string",
            "description": "Indicates the ID of the tier this member is in."
          },
          "programId": {
            "type": "string",
            "description": "Indicates the ID of the program this member is in."
          },
          "person": {
            "$ref": "#/components/schemas/ioPerson"
          },
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any other meta fields for the member that are not covered in the protocol (i.e. you might want to captures sign-up location, and favorite coffee, for segmenting later on)."
          },
          "optOut": {
            "type": "boolean",
            "description": "Indicates if the member opted out to receive marketing promotions (defaults to false)."
          },
          "points": {
            "type": "number",
            "description": "Points is formatted differently based on what is set on a program level. Program points.balance field can be set to: `int`, `double` or `money`.",
            "format": "float"
          },
          "secondaryPoints": {
            "type": "number",
            "description": "Secondary Points is formatted differently based on what is set on a program level. Program secondaryPoints.balance field can be set to: `int`, `double` or `money`. Field can be utilised if your program tracks two points, i.e. loyalty point balance, and pre-paid cash balance.",
            "format": "float"
          },
          "tierPoints": {
            "type": "integer",
            "description": "Tier points can be set for programs that award tiers based on dedicated tier points. Tier points indicates the current amount of tier points someone has, and can be used by a member to check how many more tier points are required to switch to the next tier.",
            "format": "int64"
          },
          "expiryDate": {
            "type": "string",
            "description": "Indicates when the membership card expires. When the expiry date hits, it will automatically gray out the barcode.",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/membersMemberStatus"
          },
          "passOverrides": {
            "$ref": "#/components/schemas/ioPassOverrides"
          },
          "passMetaData": {
            "$ref": "#/components/schemas/ioMetadata"
          },
          "notes": {
            "type": "array",
            "description": "placeholder for notes.",
            "items": {
              "$ref": "#/components/schemas/ioNote"
            }
          },
          "currentTierAwarded": {
            "type": "string",
            "description": "The date the current tier was awarded.",
            "format": "date-time"
          },
          "currentTierExpires": {
            "type": "string",
            "description": "The date the current tier expires.",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "description": "The date the member was created in the PassKit system.",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date the member was last updated in the PassKit system.",
            "format": "date-time"
          },
          "profileImage": {
            "type": "string",
            "description": "Optional field that holds the member profile image. Can either be an image URL or base64 image string."
          }
        },
        "description": "Basic member information needs to be provided. Member information is deleted or rendered unusable once the member record is deleted."
      },
      "membersMemberCheckInOutRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "description": "PassKit generated member ID (22 characters). Required if externalMemberId and programId are not provided."
          },
          "externalMemberId": {
            "type": "string",
            "description": "External member ID. Required if id is not provided."
          },
          "programId": {
            "type": "string",
            "description": "Program ID which member belongs to. Required if id is not provided."
          },
          "address": {
            "type": "string",
            "description": "Address the event took place."
          },
          "lat": {
            "type": "number",
            "description": "Latitude the event took place.",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "Longitude the event took place.",
            "format": "double"
          },
          "alt": {
            "type": "integer",
            "description": "Altitude the event took place (in metres).",
            "format": "int32"
          },
          "externalEventId": {
            "type": "string",
            "description": "External unique ID of the event."
          },
          "externalDeviceId": {
            "type": "string",
            "description": "External device ID of the device that was used to capture the event (for example when using an external scanning app)."
          },
          "externalServiceId": {
            "type": "string",
            "description": "External service ID of the service that was used for capturing the event (for example when using an external scanning app)."
          },
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any meta data (for example gathered on scanning) that is relevant to the event (# of points earner, bill spent, device meta-data, etc)."
          },
          "notes": {
            "type": "string",
            "description": "Any relevant notes for the event."
          }
        }
      },
      "membersMemberEvent": {
        "title": "Member Events",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "PassKit generated Event ID. Not writable."
          },
          "member": {
            "$ref": "#/components/schemas/membersMemberMininmal"
          },
          "eventType": {
            "$ref": "#/components/schemas/membersMemberEvents"
          },
          "address": {
            "type": "string",
            "description": "Address the event took place."
          },
          "lat": {
            "type": "number",
            "description": "Latitude the event took place.",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "Longitude the event took place.",
            "format": "double"
          },
          "alt": {
            "type": "integer",
            "description": "Altitude the event took place (in metres).",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "description": "External unique ID of the event."
          },
          "externalUserId": {
            "type": "string",
            "description": "External user ID of the logged in user that captured the event (for example when using an external scanning app)."
          },
          "externalDeviceId": {
            "type": "string",
            "description": "External device ID of the device that was used to capture the event (for example when using an external scanning app)."
          },
          "externalServiceId": {
            "type": "string",
            "description": "External service ID of the service that was used for capturing the event (for example when using an external scanning app)."
          },
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any meta data (for example gathered on scanning) that is relevant to the event (# of points earner, bill spent, device meta-data, etc)."
          },
          "notes": {
            "type": "string",
            "description": "Any relevant notes for the event."
          },
          "date": {
            "type": "string",
            "description": "The event date.",
            "format": "date-time"
          },
          "retainedUntilDate": {
            "type": "string",
            "description": "The date until the event is retained in the PassKit database.",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "description": "The date the event record was created in the PassKit database.",
            "format": "date-time"
          }
        },
        "description": "Events that have happened for a member. Events are generated by the Membership API and are immutable."
      },
      "membersMemberEvents": {
        "title": "- EVENT_MEMBER_DO_NOT_USE: Do not use\n - EVENT_MEMBER_CHECKED_IN: Used when a member is checked in by the checked in endpoint\n - EVENT_MEMBER_CHECKED_OUT: Used when a member is checked out by the checked out endpoint\n - EVENT_MEMBER_VERIFIED: Used when a member is verified by the verify endpoint\n - EVENT_MEMBER_POINTS_EARNED: Used when points are earned by the earn points endpoints\n - EVENT_MEMBER_POINTS_BURNED: Used when points are added by the burn points endpoints\n - EVENT_MEMBER_POINTS_SET: Used when points are set by the set points endpoints\n - EVENT_MEMBER_TIER_CHANGED: Used when points the tier is changed",
        "type": "string",
        "default": "EVENT_MEMBER_DO_NOT_USE",
        "enum": [
          "EVENT_MEMBER_DO_NOT_USE",
          "EVENT_MEMBER_CHECKED_IN",
          "EVENT_MEMBER_CHECKED_OUT",
          "EVENT_MEMBER_VERIFIED",
          "EVENT_MEMBER_POINTS_EARNED",
          "EVENT_MEMBER_POINTS_BURNED",
          "EVENT_MEMBER_POINTS_SET",
          "EVENT_MEMBER_TIER_CHANGED"
        ]
      },
      "membersMemberExpiry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal PassKit ID."
          },
          "externalId": {
            "type": "string",
            "description": "External member ID."
          },
          "programId": {
            "type": "string",
            "description": "Required if externalId is set."
          },
          "expiryDate": {
            "type": "string",
            "description": "Indicates when the membership card expires. When the expiry date hits, it will automatically gray out the barcode.",
            "format": "date-time"
          }
        },
        "description": "Used to update the expiry date of a member."
      },
      "membersMemberMininmal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id assigned by PassKit to represent the member record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable."
          },
          "externalId": {
            "type": "string",
            "description": "This can be used to set the 'external' ID of the member (i.e. the member ID as it's being used in your system). If provided then this can be used to query & update members. This field will be treated as unique within the program, and cannot be updated at a later stage."
          },
          "groupingIdentifier": {
            "type": "string",
            "description": "Grouping Identifier can be used to group members under the same membership (i.e. couple)."
          },
          "tierId": {
            "type": "string",
            "description": "Indicates the ID of the tier this member is in."
          },
          "programId": {
            "type": "string",
            "description": "Indicates the ID of the program this member is in."
          },
          "person": {
            "$ref": "#/components/schemas/ioPerson"
          }
        }
      },
      "membersMemberPoints": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal PassKit ID."
          },
          "externalId": {
            "type": "string",
            "description": "External member ID."
          },
          "programId": {
            "type": "string",
            "description": "Required if externalId is set."
          },
          "points": {
            "type": "number",
            "description": "The latest point balance.",
            "format": "float"
          },
          "secondaryPoints": {
            "type": "number",
            "description": "The latest secondary point balance.",
            "format": "float"
          },
          "tierPoints": {
            "type": "integer",
            "description": "The latest tier point balance.",
            "format": "int64"
          }
        }
      },
      "membersMemberSegmentRequest": {
        "title": "Member segment allows us to segment members for listing or updating",
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/ioFilter"
          },
          "newValues": {
            "$ref": "#/components/schemas/membersMember"
          }
        }
      },
      "membersMemberStatus": {
        "title": "List of allowed member statuses",
        "type": "string",
        "description": "- ENROLLED: Member has successfully enrolled in the program.\n - ACTIVE: Member is active.\n - CHECKED_IN: Member is checked in.\n - EXPIRED: For expired members.\n - CHECKED_OUT: Member is checked out.\n - DELETED: For members who's records have been deleted.",
        "default": "ENROLLED",
        "enum": [
          "ENROLLED",
          "ACTIVE",
          "CHECKED_IN",
          "EXPIRED",
          "CHECKED_OUT",
          "DELETED"
        ]
      },
      "membersPassRecoverySettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines if users can recover passes."
          },
          "delivery": {
            "$ref": "#/components/schemas/membersRecoverPassDelivery"
          },
          "errorPageHeader": {
            "type": "string",
            "description": "The header text for the error page."
          },
          "errorPageBody": {
            "type": "string",
            "description": "The body text for the error page."
          }
        },
        "description": "PassRecoverySettings details the logic for recovering a pass."
      },
      "membersPointsType": {
        "type": "object",
        "properties": {
          "balanceType": {
            "$ref": "#/components/schemas/membersBalanceType"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code; only needs to be provided if balance type equals BALANCE_TYPE_MONEY."
          }
        }
      },
      "membersProfileImageSetting": {
        "type": "string",
        "default": "PROFILE_IMAGE_NONE",
        "enum": [
          "PROFILE_IMAGE_NONE",
          "PROFILE_IMAGE_OPTIONAL",
          "PROFILE_IMAGE_REQUIRED"
        ]
      },
      "membersProgram": {
        "title": "Program",
        "required": [
          "name",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "PassKit generated program id (22 characters)."
          },
          "name": {
            "type": "string",
            "description": "Name of the membership programs; will be shown on the enrolment page (if set) and issuer name."
          },
          "localizedName": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "status": {
            "type": "array",
            "description": "The program status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.",
            "items": {
              "$ref": "#/components/schemas/ioProjectStatus"
            }
          },
          "quota": {
            "$ref": "#/components/schemas/ioQuota"
          },
          "passTypeIdentifier": {
            "type": "string",
            "description": "Leave empty for draft programs. Needs to be set for programs where status contains PROJECT_PUBLISHED."
          },
          "distributionSettings": {
            "$ref": "#/components/schemas/ioDistributionSettings"
          },
          "autoDeleteDaysAfterExpiry": {
            "type": "integer",
            "description": "Auto deletes the member after `autoDeleteDaysAfterExpiry` days.",
            "format": "int64"
          },
          "autoReminderDaysBeforeExpiry": {
            "type": "integer",
            "description": "Sets how many days before expiry to send a reminder lockscreen message to the member.",
            "format": "int64"
          },
          "expiryMessage": {
            "type": "string",
            "description": "The message to send to the user `autoReminderDaysBeforeExpiry` days before expiry."
          },
          "localizedExpiryMessage": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "autoDeleteDaysAfterNotInstalling": {
            "type": "integer",
            "description": "Auto deletes the member `autoDeleteDaysAfterNotInstalling` days after the card has not been installed.",
            "format": "int64"
          },
          "pointsType": {
            "$ref": "#/components/schemas/membersPointsType"
          },
          "secondaryPointsType": {
            "$ref": "#/components/schemas/membersPointsType"
          },
          "metrics": {
            "$ref": "#/components/schemas/ioMetrics"
          },
          "metaFieldsList": {
            "type": "array",
            "description": "A list of dynamic fields which can be used to filter members.",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "string",
            "description": "The date the program was created.",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date the program was updated.",
            "format": "date-time"
          },
          "profileImageSettings": {
            "$ref": "#/components/schemas/membersProfileImageSetting"
          },
          "applyFieldToExternalIdOnEnrol": {
            "$ref": "#/components/schemas/membersCustomExternalId"
          },
          "eventCaptureSettings": {
            "$ref": "#/components/schemas/membersEventCaptureSettings"
          },
          "passRecoverySettings": {
            "$ref": "#/components/schemas/membersPassRecoverySettings"
          }
        },
        "description": "Membership Programs allow a company to control the business logic of their program."
      },
      "membersProgramCopyRequest": {
        "title": "Contains payload for copying a program",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "uuid of the program to copy."
          },
          "name": {
            "type": "string",
            "description": "optional name for the new program."
          },
          "status": {
            "type": "array",
            "description": "Status to set the copied program to.",
            "items": {
              "$ref": "#/components/schemas/ioProjectStatus"
            }
          },
          "passTypeIdentifier": {
            "type": "string",
            "description": "Can optionally be provided if setting status to published (requires a prod cert)."
          }
        }
      },
      "membersRecoverPassDelivery": {
        "type": "string",
        "description": "Defines what medium we deliver the recovered pass.\n\n - DELIVERY_REDIRECT: redirect to pass url.\n - DELIVERY_EMAIL: email user (resend welcome email)\n - DELIVERY_SMS: sms to users phone",
        "default": "DELIVERY_REDIRECT",
        "enum": [
          "DELIVERY_REDIRECT",
          "DELIVERY_EMAIL",
          "DELIVERY_SMS"
        ]
      },
      "membersSetPointsRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal PassKit ID."
          },
          "externalId": {
            "type": "string",
            "description": "External member ID."
          },
          "programId": {
            "type": "string",
            "description": "Required if externalId is set."
          },
          "points": {
            "type": "number",
            "description": "The latest point balance.",
            "format": "float"
          },
          "secondaryPoints": {
            "type": "number",
            "description": "The latest secondary point balance.",
            "format": "float"
          },
          "tierPoints": {
            "type": "integer",
            "description": "The latest tier point balance.",
            "format": "int64"
          },
          "resetPoints": {
            "type": "boolean",
            "description": "Reset the point balance. If set true, the point balance will be 0. The default is false."
          },
          "resetSecondaryPoints": {
            "type": "boolean",
            "description": "Reset the secondary points. If set true, the secondary point balance will be 0. The default is false."
          },
          "resetTierPoints": {
            "type": "boolean",
            "description": "Reset the tier points. If set true, the tier point balance will be 0. The default is false."
          },
          "eventDetails": {
            "$ref": "#/components/schemas/membersEventDetails"
          },
          "tierId": {
            "type": "string",
            "description": "Optional field to change the tierIf of the member."
          }
        }
      },
      "membersTier": {
        "title": "Tier",
        "required": [
          "id",
          "name",
          "passTemplateId",
          "programId",
          "tierIndex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tier identifier (could just be: blue, gold, etc); needs to be lower case. Tier ID needs to be uique within the program."
          },
          "tierIndex": {
            "type": "integer",
            "description": "Index of the tier; can be used for managing downgrades / upgrade messaging; needs to be unique within the program.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of tier."
          },
          "localizedName": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "secondaryTierName": {
            "type": "string",
            "description": "Name of the secondary reward tier."
          },
          "localizedSecondaryTierName": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "programId": {
            "type": "string",
            "description": "The program id that the tier belongs to."
          },
          "passTemplateId": {
            "type": "string",
            "description": "Identifier of pass template which identifies design and data elements for this tier."
          },
          "tierUpgradeMessage": {
            "type": "string",
            "description": "Notification to be shown when someone upgrades tier."
          },
          "localizedTierUpgradeMessage": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "tierDowngradeMessage": {
            "type": "string",
            "description": "Notification to be shown when someone downgrades tier."
          },
          "localizedTierDowngradeMessage": {
            "$ref": "#/components/schemas/ioLocalizedString"
          },
          "created": {
            "type": "string",
            "description": "The date the tier was created.",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The date the tier was updated.",
            "format": "date-time"
          },
          "pointsOverdrawn": {
            "type": "boolean",
            "description": "Set true to accept a negative point balance. Default is false."
          },
          "secondaryPointsOverdrawn": {
            "type": "boolean",
            "description": "Set true to accept a negative secondary point balance. Default is false."
          },
          "expirySettings": {
            "$ref": "#/components/schemas/ioExpirySettings"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone string in IANA timezone format. If not provided defaults to Etc/UTC."
          },
          "allowTierEnrolment": {
            "$ref": "#/components/schemas/ioPkBool"
          },
          "shortCode": {
            "type": "string",
            "description": "Tier shortcode is used in public enrolment URLs, that enrol members into the tier if the program is set to public and allowTierEnrolment = true for this tier. System generated."
          }
        },
        "description": "Tier allows a company to override certain details in the program."
      },
      "membersUpdateExpiryRequest": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "string",
            "description": "Indicates the ID of the program."
          },
          "tierId": {
            "type": "string",
            "description": "Indicates the ID of the tier."
          },
          "expirySettings": {
            "$ref": "#/components/schemas/ioExpirySettings"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone string in IANA timezone format applied for EXPIRE_ON_FIXED_DATE. If not provided Tier timezone is applied."
          }
        },
        "description": "Used to set new expiry dates for all of active members in the tier."
      },
      "protobufAny": {
        "type": "object",
        "properties": {
          "typeUrl": {
            "type": "string"
          },
          "value": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "description": "JWT Authentication token.",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}